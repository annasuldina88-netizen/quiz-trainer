import streamlit as st
import pandas as pd
import os
import json
from pathlib import Path

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CATEGORIES_DIR = "categories"
PROGRESS_DIR = "progress"

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
Path(CATEGORIES_DIR).mkdir(exist_ok=True)
Path(PROGRESS_DIR).mkdir(exist_ok=True)

# === –°—Ç–∏–ª–∏ ===
st.markdown("""
<style>
    .stApp {
        background: linear-gradient(135deg, #f5f7fa 0%, #e4edf9 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .main-header {
        text-align: center;
        color: #2c3e50;
        margin-bottom: 2rem;
    }
    .level-box {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        margin: 1rem 0;
    }
    .question-card {
        background: #f8fafc;
        padding: 1rem;
        border-left: 4px solid #3498db;
        margin: 0.8rem 0;
        border-radius: 8px;
    }
    .progress-text {
        font-weight: bold;
        color: #2980b9;
        font-size: 1.1em;
    }
    .success-box {
        background-color: #d4edda;
        color: #155724;
        padding: 0.8rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
    .error-box {
        background-color: #f8d7da;
        color: #721c24;
        padding: 0.8rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def load_categories():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Excel-—Ñ–∞–π–ª–æ–≤."""
    categories = {}
    for file in os.listdir(CATEGORIES_DIR):
        if file.endswith(".xlsx"):
            cat_name = os.path.splitext(file)[0]
            try:
                df = pd.read_excel(os.path.join(CATEGORIES_DIR, file))
                required = {'–£—Ä–æ–≤–µ–Ω—å', '–í–æ–ø—Ä–æ—Å', '–û—Ç–≤–µ—Ç'}
                if not required.issubset(df.columns):
                    st.warning(f"–§–∞–π–ª {file} –ø—Ä–æ–ø—É—â–µ–Ω: –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")
                    continue

                df = df.dropna(subset=['–£—Ä–æ–≤–µ–Ω—å', '–í–æ–ø—Ä–æ—Å', '–û—Ç–≤–µ—Ç'])
                df['–£—Ä–æ–≤–µ–Ω—å'] = df['–£—Ä–æ–≤–µ–Ω—å'].astype(int)

                levels = {}
                for _, row in df.iterrows():
                    lvl = row['–£—Ä–æ–≤–µ–Ω—å']
                    question = str(row['–í–æ–ø—Ä–æ—Å']).strip()
                    main_answer = str(row['–û—Ç–≤–µ—Ç']).strip()
                    alt_str = str(row.get('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã', '')).strip()

                    # –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
                    correct_answers = [main_answer.lower()]
                    if alt_str:
                        alts = [a.strip().lower() for a in alt_str.split(',') if a.strip()]
                        correct_answers.extend(alts)

                    if lvl not in levels:
                        levels[lvl] = []
                    levels[lvl].append({
                        '–í–æ–ø—Ä–æ—Å': question,
                        '–û—Ç–≤–µ—Ç_–¥–ª—è_–ø–æ–∫–∞–∑–∞': main_answer,
                        '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ': correct_answers
                    })
                categories[cat_name] = levels
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file}: {e}")
    return categories


def get_progress_file(username):
    return os.path.join(PROGRESS_DIR, f"{username}.json")


def load_user_progress(username):
    file_path = get_progress_file(username)
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}


def save_user_progress(username, progress):
    file_path = get_progress_file(username)
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(progress, f, ensure_ascii=False, indent=2)


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
if 'username' not in st.session_state:
    st.session_state.username = None
if 'current_category' not in st.session_state:
    st.session_state.current_category = None
if 'current_level' not in st.session_state:
    st.session_state.current_level = None

# === –≠–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ===
if st.session_state.username is None:
    st.markdown("<h1 class='main-header'>üé¨ –ö–∏–Ω–æ–¢—Ä–µ–Ω–∞–∂—ë—Ä</h1>", unsafe_allow_html=True)
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")

    username = st.text_input("–í–∞—à–µ –∏–º—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π –∏–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π):", key="login")
    if st.button("–ù–∞—á–∞—Ç—å", type="primary"):
        if username.strip():
            st.session_state.username = username.strip()
            st.rerun()
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.")
    st.stop()

# === –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
st.markdown(f"<h1 class='main-header'>–ü—Ä–∏–≤–µ—Ç, {st.session_state.username}! üëã</h1>", unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
categories = load_categories()
if not categories:
    st.error("‚ö†Ô∏è –ü–∞–ø–∫–∞ `categories` –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Excel-—Ñ–∞–π–ª–æ–≤.")
    st.stop()

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
col1, col2 = st.columns([2, 1])
with col1:
    selected_cat = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", list(categories.keys()))
with col2:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"):
        st.rerun()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞
if st.button("üöÄ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", type="primary"):
    st.session_state.current_category = selected_cat
    st.session_state.current_level = 1

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞
if st.session_state.current_category:
    cat = st.session_state.current_category
    levels = categories[cat]
    level_num = st.session_state.current_level

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progress = load_user_progress(st.session_state.username)
    cat_key = f"cat_{cat}"
    if cat_key not in user_progress:
        user_progress[cat_key] = {}

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã
    max_level = max(levels.keys())
    unlocked_up_to = 1
    for lvl in range(1, max_level + 1):
        lvl_key = f"lvl_{lvl}"
        if lvl_key in user_progress[cat_key]:
            if user_progress[cat_key][lvl_key].get("correct", 0) >= 10:
                unlocked_up_to = lvl + 1 if lvl + 1 <= max_level else max_level
            else:
                break
        else:
            if lvl == 1:
                unlocked_up_to = 1
            break

    # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
    st.markdown(f"### üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{cat}**")
    level_choice = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å",
        options=[i for i in range(1, max_level + 1)],
        index=min(level_num - 1, unlocked_up_to - 1),
        format_func=lambda x: f"–£—Ä–æ–≤–µ–Ω—å {x} {'üîì' if x <= unlocked_up_to else 'üîí'}"
    )

    if level_choice > unlocked_up_to:
        st.warning("–≠—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å 10+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.")
        st.stop()

    st.session_state.current_level = level_choice
    questions = levels.get(level_choice, [])

    if not questions:
        st.error("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.")
        st.stop()

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–≤–Ω—é
    lvl_key = f"lvl_{level_choice}"
    if lvl_key not in user_progress[cat_key]:
        user_progress[cat_key][lvl_key] = {
            "correct": 0,
            "total": len(questions),
            "mistakes": list(range(len(questions)))  # –∏–Ω–¥–µ–∫—Å—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
        }

    lvl_data = user_progress[cat_key][lvl_key]
    correct = lvl_data["correct"]
    total = lvl_data["total"]
    mistakes = set(lvl_data["mistakes"])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ
    if mistakes:
        questions_to_show = [(i, q) for i, q in enumerate(questions) if i in mistakes]
        st.info(f"üîÅ –ü–æ–≤—Ç–æ—Ä: {len(questions_to_show)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {total}")
    else:
        st.success("üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–π–¥–µ–Ω!")
        questions_to_show = []

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    st.markdown(f"<div class='progress-text'>–ü—Ä–æ–≥—Ä–µ—Å—Å: {correct} / {total}</div>", unsafe_allow_html=True)
    st.progress(correct / total if total > 0 else 0)

    # –í–æ–ø—Ä–æ—Å—ã
    any_answered = False
    for idx, q in questions_to_show:
        with st.container():
            st.markdown(f"<div class='question-card'><strong>–í–æ–ø—Ä–æ—Å {idx + 1}:</strong> {q['–í–æ–ø—Ä–æ—Å']}</div>",
                        unsafe_allow_html=True)
            user_ans = st.text_input(f"–í–∞—à –æ—Ç–≤–µ—Ç", key=f"ans_{level_choice}_{idx}", placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç...")

            if user_ans:
                any_answered = True
                if user_ans.lower() in q['–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ']:
                    if idx in mistakes:
                        mistakes.remove(idx)
                        lvl_data["correct"] = total - len(mistakes)
                        save_user_progress(st.session_state.username, user_progress)
                    st.markdown("<div class='success-box'>‚úÖ –í–µ—Ä–Ω–æ!</div>", unsafe_allow_html=True)
                else:
                    st.markdown(f"<div class='error-box'>‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['–û—Ç–≤–µ—Ç_–¥–ª—è_–ø–æ–∫–∞–∑–∞']}</div>",
                                unsafe_allow_html=True)

    # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    if not mistakes:
        st.balloons()
        st.success("‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!")
        if level_choice < max_level:
            st.info("–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.divider()
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
            st.session_state.current_category = None
            st.rerun()
    with col2:
        if st.button("üìö –°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"):
            st.session_state.current_category = None
            st.rerun()
    with col3:
        if st.button("üîÑ –î—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å"):
            st.rerun()

# –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
st.divider()
if st.button("üö™ –í—ã–π—Ç–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ)"):
    st.session_state.username = None
    st.session_state.current_category = None
    st.rerun()